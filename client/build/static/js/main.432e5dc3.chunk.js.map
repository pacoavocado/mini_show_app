{"version":3,"sources":["utils/helpers.js","utils/actions.js","utils/reducers.js","utils/GlobalState.js","components/MiniatureItem/index.js","utils/queries.js","assets/spinner.gif","components/MiniatureList/index.js","components/CategoryMenu/index.js","utils/auth.js","pages/Home.js","components/Cart/index.js","components/CommentList/index.js","utils/mutations.js","components/CommentForm/index.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","pages/Gallery.js","App.js","serviceWorker.js","index.js"],"names":["idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","UPDATE_MINIATURES","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","TOGGLE_CART","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","reducer","state","action","type","miniatures","cartOpen","cart","miniature","map","purchaseQuantity","newState","filter","length","categories","currentCategory","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","MiniatureItem","item","image","name","price","quantity","className","to","alt","src","QUERY_MINIATURES","gql","QUERY_CATEGORIES","QUERY_USER","MiniatureList","useQuery","loading","data","useEffect","forEach","then","category","spinner","CategoryMenu","categoryData","href","onClick","id","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","Home","loadStripe","CommentList","comments","style","borderBottom","comment","commentAuthor","fontSize","createdAt","commentText","LOGIN","ADD_ORDER","ADD_USER","ADD_COMMENT","CommentForm","miniatureId","useState","setCommentText","characterCount","setCharacterCount","useMutation","addComment","error","handleFormSubmit","event","a","preventDefault","variables","Auth","getProfile","username","loggedIn","message","onSubmit","placeholder","lineHeight","resize","onChange","target","Detail","useParams","currentMiniature","setCurrentMiniature","find","indexedMiniatures","description","border","Jumbotron","children","height","clear","paddingTop","textAlign","NoMatch","role","Login","email","password","formState","setFormState","login","mutationResponse","handleChange","htmlFor","Signup","addUser","firstName","lastName","Nav","logout","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","parseInt","purchaseDate","toLocaleDateString","index","Gallery","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.432e5dc3.chunk.js","sourcesContent":["export function pluralize(name, count) {\r\n  if (count === 1) {\r\n    return name;\r\n  }\r\n  return name + 's';\r\n}\r\n\r\nexport function idbPromise(storeName, method, object) {\r\n  return new Promise((resolve, reject) => {\r\n    const request = window.indexedDB.open('rouge tuber', 1);\r\n    let db, tx, store;\r\n    request.onupgradeneeded = function(e) {\r\n      const db = request.result;\r\n      db.createObjectStore('miniatures', { keyPath: '_id' });\r\n      db.createObjectStore('categories', { keyPath: '_id' });\r\n      db.createObjectStore('cart', { keyPath: '_id' });\r\n    };\r\n\r\n    request.onerror = function(e) {\r\n      console.log('There was an error');\r\n    };\r\n\r\n    request.onsuccess = function(e) {\r\n      db = request.result;\r\n      tx = db.transaction(storeName, 'readwrite');\r\n      store = tx.objectStore(storeName);\r\n\r\n      db.onerror = function(e) {\r\n        console.log('error', e);\r\n      };\r\n\r\n      switch (method) {\r\n        case 'put':\r\n          store.put(object);\r\n          resolve(object);\r\n          break;\r\n        case 'get':\r\n          const all = store.getAll();\r\n          all.onsuccess = function() {\r\n            resolve(all.result);\r\n          };\r\n          break;\r\n        case 'delete':\r\n          store.delete(object._id);\r\n          break;\r\n        default:\r\n          console.log('No valid method');\r\n          break;\r\n      }\r\n\r\n      tx.oncomplete = function() {\r\n        db.close();\r\n      };\r\n    };\r\n  });\r\n}\r\n","export const UPDATE_MINIATURES = \"UPDATE_MINIATURES\";\r\n\r\nexport const ADD_TO_CART = \"ADD_TO_CART\";\r\nexport const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART\";\r\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\r\nexport const CLEAR_CART = \"CLEAR_CART\";\r\nexport const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\r\nexport const TOGGLE_CART = \"TOGGLE_CART\";\r\n\r\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\r\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\r\n","import { useReducer } from 'react';\r\nimport {\r\n  UPDATE_MINIATURES,\r\n  ADD_TO_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  REMOVE_FROM_CART,\r\n  ADD_MULTIPLE_TO_CART,\r\n  UPDATE_CATEGORIES,\r\n  UPDATE_CURRENT_CATEGORY,\r\n  CLEAR_CART,\r\n  TOGGLE_CART,\r\n} from './actions';\r\n\r\n// The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\r\nexport const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    // Returns a copy of state with an update miniatures array. We use the action.miniatures property and spread it's contents into the new array.\r\n    case UPDATE_MINIATURES:\r\n      return {\r\n        ...state,\r\n        miniatures: [...action.miniatures],\r\n      };\r\n\r\n    case ADD_TO_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: true,\r\n        cart: [...state.cart, action.miniature],\r\n      };\r\n    case ADD_MULTIPLE_TO_CART:\r\n      return {\r\n        ...state,\r\n        cart: [...state.cart, ...action.miniatures],\r\n      };\r\n    // Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\r\n    // If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\r\n    case UPDATE_CART_QUANTITY:\r\n      return {\r\n        ...state,\r\n        cartOpen: true,\r\n        cart: state.cart.map((miniature) => {\r\n          if (action._id === miniature._id) {\r\n            miniature.purchaseQuantity = action.purchaseQuantity;\r\n          }\r\n          return miniature;\r\n        }),\r\n      };\r\n\r\n    // First we iterate through each item in the cart and check to see if the `miniature._id` matches the `action._id`\r\n    // If so, we remove it from our cart and set the updated state to a variable called `newState`\r\n    case REMOVE_FROM_CART:\r\n      let newState = state.cart.filter((miniature) => {\r\n        return miniature._id !== action._id;\r\n      });\r\n\r\n      // Then we return a copy of state and check to see if the cart is empty.\r\n      // If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\r\n      return {\r\n        ...state,\r\n        cartOpen: newState.length > 0,\r\n        cart: newState,\r\n      };\r\n\r\n    case CLEAR_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: false,\r\n        cart: [],\r\n      };\r\n\r\n    case TOGGLE_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: !state.cartOpen,\r\n      };\r\n\r\n    case UPDATE_CATEGORIES:\r\n      return {\r\n        ...state,\r\n        categories: [...action.categories],\r\n      };\r\n\r\n    case UPDATE_CURRENT_CATEGORY:\r\n      return {\r\n        ...state,\r\n        currentCategory: action.currentCategory,\r\n      };\r\n\r\n    // Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\r\n    // This saves us from a crash.\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport function useMiniatureReducer(initialState) {\r\n  return useReducer(reducer, initialState);\r\n}\r\n","import React, { createContext, useContext } from \"react\";\r\nimport { useMiniatureReducer } from './reducers'\r\n\r\nconst StoreContext = createContext();\r\nconst { Provider } = StoreContext;\r\n\r\nconst StoreProvider = ({ value = [], ...props }) => {\r\n  const [state, dispatch] = useMiniatureReducer({\r\n    miniatures: [],\r\n    cart: [],\r\n    cartOpen: false,\r\n    categories: [],\r\n    currentCategory: '',\r\n  });\r\n\r\n  return <Provider value={[state, dispatch]} {...props} />;\r\n};\r\n\r\nconst useStoreContext = () => {\r\n  return useContext(StoreContext);\r\n};\r\n\r\nexport { StoreProvider, useStoreContext };\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { pluralize } from \"../../utils/helpers\"\r\nimport { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\n\r\nfunction MiniatureItem(item) {\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  const {\r\n    image,\r\n    name,\r\n    _id,\r\n    price,\r\n    quantity\r\n  } = item;\r\n\r\n  const { cart } = state\r\n\r\n  const addToCart = () => {\r\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\r\n    if (itemInCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: _id,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n      idbPromise('cart', 'put', {\r\n        ...itemInCart,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        miniature: { ...item, purchaseQuantity: 1 }\r\n      });\r\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"card px-1 py-1\">\r\n      <Link to={`/miniatures/${_id}`}>\r\n        <img\r\n          alt={name}\r\n          src={`/images/${image}`}\r\n        />\r\n        <p>{name}</p>\r\n      </Link>\r\n      {/* <div>\r\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\r\n        <span>${price}</span>\r\n      </div>\r\n      <button onClick={addToCart}>Add to cart</button> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MiniatureItem;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const QUERY_MINIATURES = gql`\r\n  query getMiniatures($category: ID) {\r\n    miniatures(category: $category) {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      image\r\n      category {\r\n        _id\r\n      }\r\n      comments {\r\n        _id\r\n        commentText\r\n        commentAuthor\r\n        createdAt\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_CHECKOUT = gql`\r\n  query getCheckout($miniatures: [ID]!) {\r\n    checkout(miniatures: $miniatures) {\r\n      session\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_ALL_MINIATURES = gql`\r\n  {\r\n    miniatures {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      category {\r\n        name\r\n      }\r\n      comments {\r\n        _id\r\n        commentText\r\n        commentAuthor\r\n        createdAt\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_CATEGORIES = gql`\r\n  {\r\n    categories {\r\n      _id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_USER = gql`\r\n  {\r\n    user {\r\n      firstName\r\n      lastName\r\n      orders {\r\n        _id\r\n        purchaseDate\r\n        miniatures {\r\n          _id\r\n          name\r\n          description\r\n          price\r\n          quantity\r\n          image\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/spinner.689d9a07.gif\";","import React, { useEffect } from 'react';\r\nimport MiniatureItem from '../MiniatureItem';\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport { UPDATE_MINIATURES } from '../../utils/actions';\r\nimport { useQuery } from '@apollo/client';\r\nimport { QUERY_MINIATURES } from '../../utils/queries';\r\nimport { idbPromise } from '../../utils/helpers';\r\nimport spinner from '../../assets/spinner.gif';\r\n\r\nfunction MiniatureList() {\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  const { currentCategory } = state;\r\n\r\n  const { loading, data } = useQuery(QUERY_MINIATURES);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      dispatch({\r\n        type: UPDATE_MINIATURES,\r\n        miniatures: data.miniatures,\r\n      });\r\n      data.miniatures.forEach((miniature) => {\r\n        idbPromise('miniatures', 'put', miniature);\r\n      });\r\n    } else if (!loading) {\r\n      idbPromise('miniatures', 'get').then((miniatures) => {\r\n        dispatch({\r\n          type: UPDATE_MINIATURES,\r\n          miniatures: miniatures,\r\n        });\r\n      });\r\n    }\r\n  }, [data, loading, dispatch]);\r\n\r\n  function filterMiniatures() {\r\n    if (!currentCategory) {\r\n      return state.miniatures;\r\n    }\r\n\r\n    return state.miniatures.filter(\r\n      (miniature) => miniature.category._id === currentCategory\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"my-2\">\r\n      <h2>Our Miniatures:</h2>\r\n      {state.miniatures.length ? (\r\n        <div className=\"flex-row\">\r\n          {filterMiniatures().map((miniature) => (\r\n            <MiniatureItem\r\n              key={miniature._id}\r\n              _id={miniature._id}\r\n              image={miniature.image}\r\n              name={miniature.name}\r\n              // price={miniature.price}\r\n              // quantity={miniature.quantity}\r\n            />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <h3>You haven't added any miniatures yet!</h3>\r\n      )}\r\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MiniatureList;\r\n","import React, { useEffect } from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport {\r\n  UPDATE_CATEGORIES,\r\n  UPDATE_CURRENT_CATEGORY,\r\n} from '../../utils/actions';\r\nimport { QUERY_CATEGORIES } from '../../utils/queries';\r\nimport { idbPromise } from '../../utils/helpers';\r\n\r\nfunction CategoryMenu() {\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  const { categories } = state;\r\n\r\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\r\n\r\n  useEffect(() => {\r\n    if (categoryData) {\r\n      dispatch({\r\n        type: UPDATE_CATEGORIES,\r\n        categories: categoryData.categories,\r\n      });\r\n      categoryData.categories.forEach((category) => {\r\n        idbPromise('categories', 'put', category);\r\n      });\r\n    } else if (!loading) {\r\n      idbPromise('categories', 'get').then((categories) => {\r\n        dispatch({\r\n          type: UPDATE_CATEGORIES,\r\n          categories: categories,\r\n        });\r\n      });\r\n    }\r\n  }, [categoryData, loading, dispatch]);\r\n\r\n  const handleClick = (id) => {\r\n    dispatch({\r\n      type: UPDATE_CURRENT_CATEGORY,\r\n      currentCategory: id,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Choose a Category:</h2>\r\n      <button href=\"/gallery\">Collection</button>\r\n      {categories.map((item) => (\r\n        <button\r\n          key={item._id}\r\n          onClick={() => {\r\n            handleClick(item._id);\r\n          }}\r\n        >\r\n          {item.name}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoryMenu;\r\n","import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token);\r\n  }\r\n\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import React from \"react\";\r\nimport MiniatureList from \"../components/MiniatureList\";\r\nimport CategoryMenu from \"../components/CategoryMenu\";\r\nimport Cart from \"../components/Cart\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      {/* <CategoryMenu />\r\n      <MiniatureList />\r\n      <Cart /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useEffect } from 'react';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport { useLazyQuery } from '@apollo/client';\r\nimport { QUERY_CHECKOUT } from '../../utils/queries';\r\nimport { idbPromise } from '../../utils/helpers';\r\nimport CartItem from '../CartItem';\r\nimport Auth from '../../utils/auth';\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\r\nimport './style.css';\r\n\r\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\r\n\r\nconst Cart = () => {\r\n  const [state, dispatch] = useStoreContext();\r\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      stripePromise.then((res) => {\r\n        res.redirectToCheckout({ sessionId: data.checkout.session });\r\n      });\r\n    }\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    async function getCart() {\r\n      const cart = await idbPromise('cart', 'get');\r\n      dispatch({ type: ADD_MULTIPLE_TO_CART, miniatures: [...cart] });\r\n    }\r\n\r\n    if (!state.cart.length) {\r\n      getCart();\r\n    }\r\n  }, [state.cart.length, dispatch]);\r\n\r\n  function toggleCart() {\r\n    dispatch({ type: TOGGLE_CART });\r\n  }\r\n\r\n  function calculateTotal() {\r\n    let sum = 0;\r\n    state.cart.forEach((item) => {\r\n      sum += item.price * item.purchaseQuantity;\r\n    });\r\n    return sum.toFixed(2);\r\n  }\r\n\r\n  function submitCheckout() {\r\n    const miniatureIds = [];\r\n\r\n    state.cart.forEach((item) => {\r\n      for (let i = 0; i < item.purchaseQuantity; i++) {\r\n        miniatureIds.push(item._id);\r\n      }\r\n    });\r\n\r\n    getCheckout({\r\n      variables: { miniatures: miniatureIds },\r\n    });\r\n  }\r\n\r\n  if (!state.cartOpen) {\r\n    return (\r\n      <div className=\"cart-closed\" onClick={toggleCart}>\r\n        <span role=\"img\" aria-label=\"trash\">\r\n          🛒\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"cart\">\r\n      <div className=\"close\" onClick={toggleCart}>\r\n        [close]\r\n      </div>\r\n      <h2>Shopping Cart</h2>\r\n      {state.cart.length ? (\r\n        <div>\r\n          {state.cart.map((item) => (\r\n            <CartItem key={item._id} item={item} />\r\n          ))}\r\n\r\n          <div className=\"flex-row space-between\">\r\n            <strong>Total: ${calculateTotal()}</strong>\r\n\r\n            {Auth.loggedIn() ? (\r\n              <button onClick={submitCheckout}>Checkout</button>\r\n            ) : (\r\n              <span>(log in to check out)</span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <h3>\r\n          <span role=\"img\" aria-label=\"shocked\">\r\n            😱\r\n          </span>\r\n          You haven't added anything to your cart yet!\r\n        </h3>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n","import React from 'react';\r\n\r\nconst CommentList = ({ comments = [] }) => {\r\n  if (!comments.length) {\r\n    return <h3>No Comments Yet</h3>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h3\r\n        className=\"p-5 display-inline-block\"\r\n        style={{ borderBottom: '1px dotted #1a1a1a' }}\r\n      >\r\n        Comments\r\n      </h3>\r\n      <div className=\"flex-row my-4\">\r\n        {comments &&\r\n          comments.map((comment) => (\r\n            <div key={comment._id} className=\"col-12 mb-3 pb-3\">\r\n              <div className=\"p-3 bg-dark text-light\">\r\n                <h5 className=\"card-header\">\r\n                  {comment.commentAuthor} said{' '}\r\n                  <span style={{ fontSize: '0.825rem' }}>\r\n                    on {comment.createdAt}\r\n                  </span>\r\n                </h5>\r\n                <p className=\"card-body\">{comment.commentText}</p>\r\n              </div>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CommentList;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_ORDER = gql`\r\n  mutation addOrder($miniatures: [ID]!) {\r\n    addOrder(miniatures: $miniatures) {\r\n      purchaseDate\r\n      miniatures {\r\n        _id\r\n        name\r\n        description\r\n        price\r\n        quantity\r\n        category {\r\n          name\r\n        }\r\n        comments {\r\n        _id\r\n        commentText\r\n      }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser(\r\n    $firstName: String!\r\n    $lastName: String!\r\n    $email: String!\r\n    $password: String!\r\n  ) {\r\n    addUser(\r\n      firstName: $firstName\r\n      lastName: $lastName\r\n      email: $email\r\n      password: $password\r\n    ) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_COMMENT = gql`\r\n  mutation addComment($miniatureId: ID!, $commentText: String!) {\r\n    addComment(miniatureId: $miniatureId, commentText: $commentText) {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      image\r\n      category {\r\n        _id\r\n      }\r\n      comments {\r\n        _id\r\n        commentText\r\n        createdAt\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\n\r\nimport { ADD_COMMENT } from '../../utils/mutations';\r\n\r\nimport Auth from '../../utils/auth';\r\n\r\nconst CommentForm = ({ miniatureId }) => {\r\n  const [commentText, setCommentText] = useState('');\r\n  const [characterCount, setCharacterCount] = useState(0);\r\n\r\n  const [addComment, { error }] = useMutation(ADD_COMMENT);\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const { data } = await addComment({\r\n        variables: {\r\n          miniatureId,\r\n          commentText,\r\n          commentAuthor: Auth.getProfile().data.username,\r\n        },\r\n      });\r\n\r\n      setCommentText('');\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    if (name === 'commentText' && value.length <= 280) {\r\n      setCommentText(value);\r\n      setCharacterCount(value.length);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h4>What are your thoughts on this miniatures paint job?</h4>\r\n\r\n      {Auth.loggedIn() ? (\r\n        <>\r\n          <p\r\n            className={`m-0 ${\r\n              characterCount === 280 || error ? 'text-danger' : ''\r\n            }`}\r\n          >\r\n            Character Count: {characterCount}/280\r\n            {error && <span className=\"ml-2\">{error.message}</span>}\r\n          </p>\r\n          <form\r\n            className=\"flex-row justify-center justify-space-between-md align-center\"\r\n            onSubmit={handleFormSubmit}\r\n          >\r\n            <div className=\"col-12 col-lg-9\">\r\n              <textarea\r\n                name=\"commentText\"\r\n                placeholder=\"Add your comment...\"\r\n                value={commentText}\r\n                className=\"form-input w-100\"\r\n                style={{ lineHeight: '1.5', resize: 'vertical' }}\r\n                onChange={handleChange}\r\n              ></textarea>\r\n            </div>\r\n\r\n            <div className=\"col-12 col-lg-3\">\r\n              <button className=\"btn btn-primary btn-block py-3\" type=\"submit\">\r\n                Add Comment\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </>\r\n      ) : (\r\n        <p>\r\n          You need to be logged in to share your miniatures views. Please{' '}\r\n          <Link to=\"/login\">login</Link> or <Link to=\"/signup\">signup.</Link>\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CommentForm;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { useQuery } from '@apollo/client';\r\n\r\nimport Cart from '../components/Cart';\r\nimport { useStoreContext } from '../utils/GlobalState';\r\nimport {\r\n  REMOVE_FROM_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  ADD_TO_CART,\r\n  UPDATE_MINIATURES,\r\n} from '../utils/actions';\r\nimport { QUERY_MINIATURES } from '../utils/queries';\r\nimport { idbPromise } from '../utils/helpers';\r\nimport spinner from '../assets/spinner.gif';\r\n\r\nimport CommentList from '../components/CommentList';\r\nimport CommentForm from '../components/CommentForm';\r\n\r\nfunction Detail() {\r\n  const [state, dispatch] = useStoreContext();\r\n  const { id } = useParams();\r\n\r\n  const [currentMiniature, setCurrentMiniature] = useState({});\r\n\r\n  const { loading, data } = useQuery(QUERY_MINIATURES);\r\n\r\n  const { miniatures, cart } = state;\r\n\r\n  useEffect(() => {\r\n    // already in global store\r\n    if (miniatures.length) {\r\n      setCurrentMiniature(miniatures.find((miniature) => miniature._id === id));\r\n    }\r\n    // retrieved from server\r\n    else if (data) {\r\n      dispatch({\r\n        type: UPDATE_MINIATURES,\r\n        miniatures: data.miniatures,\r\n      });\r\n\r\n      data.miniatures.forEach((miniature) => {\r\n        idbPromise('miniatures', 'put', miniature);\r\n      });\r\n    }\r\n    // get cache from idb\r\n    else if (!loading) {\r\n      idbPromise('miniatures', 'get').then((indexedMiniatures) => {\r\n        dispatch({\r\n          type: UPDATE_MINIATURES,\r\n          miniatures: indexedMiniatures,\r\n        });\r\n      });\r\n    }\r\n  }, [miniatures, data, loading, dispatch, id]);\r\n\r\n  const addToCart = () => {\r\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\r\n    if (itemInCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: id,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\r\n      });\r\n      idbPromise('cart', 'put', {\r\n        ...itemInCart,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        miniature: { ...currentMiniature, purchaseQuantity: 1 },\r\n      });\r\n      idbPromise('cart', 'put', { ...currentMiniature, purchaseQuantity: 1 });\r\n    }\r\n  };\r\n\r\n  const removeFromCart = () => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: currentMiniature._id,\r\n    });\r\n\r\n    idbPromise('cart', 'delete', { ...currentMiniature });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {currentMiniature && cart ? (\r\n        <div className=\"container my-1\">\r\n          <Link to=\"/gallery\">← Back to Miniatures</Link>\r\n\r\n          <h2>{currentMiniature.name}</h2>\r\n\r\n          <p>{currentMiniature.description}</p>\r\n\r\n          {/* <p>\r\n            <strong>Price:</strong>${currentMiniature.price}{' '}\r\n            <button onClick={addToCart}>Add to Cart</button>\r\n            <button\r\n              disabled={!cart.find((p) => p._id === currentMiniature._id)}\r\n              onClick={removeFromCart}\r\n            >\r\n              Remove from Cart\r\n            </button>\r\n          </p> */}\r\n\r\n          <img\r\n            src={`/images/${currentMiniature.image}`}\r\n            alt={currentMiniature.name}\r\n          />\r\n        </div>\r\n      ) : null}\r\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\r\n      {/* <Cart /> */}\r\n      <div className=\"my-5\">\r\n        <CommentList comments={currentMiniature.comments} />\r\n      </div>\r\n      <div className=\"m-3 p-4\" style={{ border: '1px dotted #1a1a1a' }}>\r\n        <CommentForm miniatureId={currentMiniature._id} />\r\n      </div>\r\n\r\n    </>\r\n  );\r\n}\r\n// add comments to this page from 22.1.18review solved client src pages singlethought\r\nexport default Detail;\r\n","import React from \"react\";\r\n\r\nfunction Jumbotron({ children }) {\r\n  return (\r\n    <div\r\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\n\r\nconst NoMatch = () => {\r\n  return (\r\n    <div>\r\n      <Jumbotron>\r\n        <h1>404 Page Not Found</h1>\r\n        <h1>\r\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\r\n            🙄\r\n          </span>\r\n        </h1>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoMatch;\r\n","import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { Link } from 'react-router-dom';\r\nimport { LOGIN } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nfunction Login(props) {\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [login, { error }] = useMutation(LOGIN);\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const mutationResponse = await login({\r\n        variables: { email: formState.email, password: formState.password },\r\n      });\r\n      const token = mutationResponse.data.login.token;\r\n      Auth.login(token);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-1\">\r\n      <Link to=\"/signup\">← Go to Signup</Link>\r\n\r\n      <h2>Login</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"email\">Email address:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        {error ? (\r\n          <div>\r\n            <p className=\"error-text\">The provided credentials are incorrect</p>\r\n          </div>\r\n        ) : null}\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\nimport Auth from '../utils/auth';\r\nimport { ADD_USER } from '../utils/mutations';\r\n\r\nfunction Signup(props) {\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [addUser] = useMutation(ADD_USER);\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const mutationResponse = await addUser({\r\n      variables: {\r\n        email: formState.email,\r\n        password: formState.password,\r\n        firstName: formState.firstName,\r\n        lastName: formState.lastName,\r\n      },\r\n    });\r\n    const token = mutationResponse.data.addUser.token;\r\n    Auth.login(token);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-1\">\r\n      <Link to=\"/login\">← Go to Login</Link>\r\n\r\n      <h2>Signup</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"firstName\">First Name:</label>\r\n          <input\r\n            placeholder=\"First\"\r\n            name=\"firstName\"\r\n            type=\"firstName\"\r\n            id=\"firstName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"lastName\">Last Name:</label>\r\n          <input\r\n            placeholder=\"Last\"\r\n            name=\"lastName\"\r\n            type=\"lastName\"\r\n            id=\"lastName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"email\">Email:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Signup;\r\n","import React from \"react\";\r\nimport Auth from \"../../utils/auth\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Nav() {\r\n\r\n  function showNavigation() {\r\n    if (Auth.loggedIn()) {\r\n      return (\r\n        <ul className=\"flex-row\">\r\n          {/* <li className=\"mx-1\">\r\n            <Link to=\"/orderHistory\">\r\n              Order History\r\n            </Link>\r\n          </li> */}\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/gallery\">\r\n              Gallery\r\n            </Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\r\n            <a href=\"/\" onClick={() => Auth.logout()}>\r\n              Logout\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      );\r\n    } else {\r\n      return (\r\n        <ul className=\"flex-row\">\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/gallery\">\r\n              Gallery\r\n            </Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/signup\">\r\n              Signup\r\n            </Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/login\">\r\n              Login\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <header className=\"flex-row px-1\">\r\n      <h1>\r\n        <Link to=\"/\">\r\n          {/* <span role=\"img\" aria-label=\"shopping bag\">🛍️</span> */}\r\n          -Rouge Tuber\r\n        </Link>\r\n      </h1>\r\n\r\n      <nav>\r\n        {showNavigation()}\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { useEffect } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport Jumbotron from '../components/Jumbotron';\r\nimport { ADD_ORDER } from '../utils/mutations';\r\nimport { idbPromise } from '../utils/helpers';\r\n\r\nfunction Success() {\r\n  const [addOrder] = useMutation(ADD_ORDER);\r\n\r\n  useEffect(() => {\r\n    async function saveOrder() {\r\n      const cart = await idbPromise('cart', 'get');\r\n      const miniatures = cart.map((item) => item._id);\r\n\r\n      if (miniatures.length) {\r\n        const { data } = await addOrder({ variables: { miniatures } });\r\n        const miniatureData = data.addOrder.miniatures;\r\n\r\n        miniatureData.forEach((item) => {\r\n          idbPromise('cart', 'delete', item);\r\n        });\r\n      }\r\n\r\n      setTimeout(() => {\r\n        window.location.assign('/');\r\n      }, 3000);\r\n    }\r\n\r\n    saveOrder();\r\n  }, [addOrder]);\r\n\r\n  return (\r\n    <div>\r\n      <Jumbotron>\r\n        <h1>Success!</h1>\r\n        <h2>Thank you for your purchase!</h2>\r\n        <h2>You will now be redirected to the home page</h2>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Success;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useQuery } from '@apollo/client';\r\nimport { QUERY_USER } from '../utils/queries';\r\n\r\nfunction OrderHistory() {\r\n  const { data } = useQuery(QUERY_USER);\r\n  let user;\r\n\r\n  if (data) {\r\n    user = data.user;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container my-1\">\r\n        <Link to=\"/\">← Back to Miniatures</Link>\r\n\r\n        {user ? (\r\n          <>\r\n            <h2>\r\n              Order History for {user.firstName} {user.lastName}\r\n            </h2>\r\n            {user.orders.map((order) => (\r\n              <div key={order._id} className=\"my-2\">\r\n                <h3>\r\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\r\n                </h3>\r\n                <div className=\"flex-row\">\r\n                  {order.miniatures.map(({ _id, image, name, price }, index) => (\r\n                    <div key={index} className=\"card px-1 py-1\">\r\n                      <Link to={`/miniatures/${_id}`}>\r\n                        <img alt={name} src={`/images/${image}`} />\r\n                        <p>{name}</p>\r\n                      </Link>\r\n                      <div>\r\n                        <span>${price}</span>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default OrderHistory;\r\n","import React from \"react\";\r\nimport MiniatureList from \"../components/MiniatureList\";\r\nimport CategoryMenu from \"../components/CategoryMenu\";\r\nimport Cart from \"../components/Cart\";\r\n\r\nconst Gallery = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <CategoryMenu />\r\n      <MiniatureList />\r\n      {/* <Cart /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Gallery;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\n\r\nimport Home from './pages/Home';\r\nimport Detail from './pages/Detail';\r\nimport NoMatch from './pages/NoMatch';\r\nimport Login from './pages/Login';\r\nimport Signup from './pages/Signup';\r\nimport Nav from './components/Nav';\r\nimport { StoreProvider } from './utils/GlobalState';\r\nimport Success from './pages/Success';\r\nimport OrderHistory from './pages/OrderHistory';\r\nimport Gallery from './pages/Gallery';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem('id_token');\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div>\r\n          <StoreProvider>\r\n            <Nav />\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Home} />\r\n              <Route exact path=\"/login\" component={Login} />\r\n              <Route exact path=\"/signup\" component={Signup} />\r\n              <Route exact path=\"/success\" component={Success} />\r\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\r\n              <Route exact path=\"/miniatures/:id\" component={Detail} />\r\n              <Route exact path=\"/gallery\" component={Gallery} />\r\n              <Route component={NoMatch} />\r\n            </Switch>\r\n          </StoreProvider>\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (\r\n    process.env.NODE_ENV === 'production' &&\r\n    'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}